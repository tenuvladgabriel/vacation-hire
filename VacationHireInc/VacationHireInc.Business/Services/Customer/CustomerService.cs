using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Extensions;using VacationHireInc.Business.Helpers;using VacationHireInc.Business.Services.Customer.Dtos;using VacationHireInc.Data.Abstraction;namespace VacationHireInc.Business.Services.Customer{    public class CustomerService : ICustomerService    {        private readonly IRepository _repository;        public CustomerService(IRepository repository)        {            _repository = repository;        }        public async Task<List<CustomerDto>> GetListAsync()        {            return await _repository.Query<Data.Entities.Customer>()                .Select(e => new CustomerDto                {                    FirstName = e.FirstName,                    LastName = e.LastName,                    PhoneNumber = e.PhoneNumber,                    Country = e.Country,                    Email = e.Email,                    InsertDate = e.InsertDate,                    UpdateDate = e.UpdateDate                })                .ToListAsync();        }        public async Task<CustomerDto> GetDetailsAsync(Guid id)        {            var result = await _repository.Query<Data.Entities.Customer>()                .Where(e => e.Id == id)                .Select(e => new CustomerDto                {                    FirstName = e.FirstName,                    LastName = e.LastName,                    PhoneNumber = e.PhoneNumber,                    Country = e.Country,                    Email = e.Email,                    InsertDate = e.InsertDate,                    UpdateDate = e.UpdateDate                })                .FirstOrDefaultAsync();            if (result == null)            {                throw new ObjectNotFoundException(id.ToString(), typeof(Data.Entities.Customer));            }            return result;        }        public async Task CreateAsync(CustomerDto dto)        {            CheckData(dto);            await _repository.InsertAsync(new Data.Entities.Customer            {                Id = Guid.NewGuid(),                FirstName = dto.FirstName,                LastName = dto.LastName,                Email = dto.Email,                PhoneNumber = dto.PhoneNumber,                Country = dto.Country,                InsertDate = DateTime.UtcNow            });            await _repository.SaveAsync();        }        public async Task UpdateAsync(Guid id, CustomerDto dto)        {            CheckData(dto);            var entity = await _repository.Query<Data.Entities.Customer>()                .Where(e => e.Id == id)                .FirstOrDefaultAsync();            if (entity == null)            {                throw new ObjectNotFoundException(id.ToString(), typeof(Data.Entities.Customer));            }            entity.FirstName = dto.FirstName;            entity.LastName = dto.LastName;            entity.PhoneNumber = dto.PhoneNumber;            entity.Country = dto.Country;            entity.Email = dto.Email;            entity.UpdateDate = DateTime.UtcNow;            await _repository.SaveAsync();        }        public async Task DeleteAsync(Guid id)        {            var affectedRows = await _repository.Query<Data.Entities.Customer>()                .Where(e => e.Id == id)                .DeleteFromQueryAsync();            if (affectedRows == 0)            {                throw new ObjectNotFoundException(id.ToString(), typeof(Data.Entities.Customer));            }        }        private static void CheckData<T>(T data) where T : class        {            if (data == null)            {                throw new ArgumentNullException();            }        }    }}