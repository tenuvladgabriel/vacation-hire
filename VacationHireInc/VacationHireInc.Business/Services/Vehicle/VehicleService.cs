using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Extensions;using VacationHireInc.Business.Helpers;using VacationHireInc.Business.Services.Vehicle.Dtos;using VacationHireInc.Data.Abstraction;using VacationHireInc.Data.Entities.Enums;namespace VacationHireInc.Business.Services.Vehicle{    public class VehicleService : IVehicleService    {        private readonly IRepository _repository;        public VehicleService(IRepository repository)        {            _repository = repository;        }        public async Task<List<VehicleDto>> GetListAsync()        {            return await _repository.Query<Data.Entities.Vehicle>()                .Select(e => new VehicleDto                {                    Id = e.Id,                    Name = e.Name,                    CreateDate = e.CreateDate,                    Color = e.Color,                    NumberOfMiles = e.NumberOfMiles,                    Price = e.Price,                    AvailabilityStatus = e.AvailabilityStatus,                    BodyType = e.BodyType,                    BrandType = e.BrandType,                    FuelType = e.FuelType,                    ReservationId = e.ReservationId                })                .ToListAsync();        }        public async Task<VehicleDto> GetDetailsAsync(string id)        {            var result = await _repository.Query<Data.Entities.Vehicle>()                .Where(e => e.Id == id)                .Select(e => new VehicleDto                {                    Id = e.Id,                    Name = e.Name,                    CreateDate = e.CreateDate,                    Color = e.Color,                    NumberOfMiles = e.NumberOfMiles,                    Price = e.Price,                    AvailabilityStatus = e.AvailabilityStatus,                    BodyType = e.BodyType,                    BrandType = e.BrandType,                    FuelType = e.FuelType,                    ReservationId = e.ReservationId                })                .FirstOrDefaultAsync();            if (result == null)            {                throw new ObjectNotFoundException(id, typeof(Data.Entities.Vehicle));            }            return result;        }        public async Task CreateAsync(VehicleDto dto)        {            GenericMethods.CheckRequestData(dto);            await _repository.InsertAsync(new Data.Entities.Vehicle            {                Id = Guid.NewGuid().ToString(),                Name = dto.Name,                CreateDate = dto.CreateDate,                Color = dto.Color,                NumberOfMiles = dto.NumberOfMiles,                Price = dto.Price,                AvailabilityStatus = AvailabilityStatus.Disposable,                BodyType = dto.BodyType,                BrandType = dto.BrandType,                FuelType = dto.FuelType,                ReservationId = dto.ReservationId            });            await _repository.SaveAsync();        }        public async Task UpdateAsync(string id, VehicleDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = await _repository.GetEntityAsync<Data.Entities.Vehicle>(id);            entity.Name = dto.Name;            entity.CreateDate = dto.CreateDate;            entity.Color = dto.Color;            entity.NumberOfMiles = dto.NumberOfMiles;            entity.Price = dto.Price;            entity.AvailabilityStatus = dto.AvailabilityStatus;            entity.BodyType = dto.BodyType;            entity.BrandType = dto.BrandType;            entity.FuelType = dto.FuelType;            entity.ReservationId = dto.ReservationId;            await _repository.SaveAsync();        }        public async Task DeleteAsync(string id)        {            await _repository.DeleteAsync<Data.Entities.Vehicle>(id);        }    }}