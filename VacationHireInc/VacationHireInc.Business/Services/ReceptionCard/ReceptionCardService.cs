using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Extensions;using VacationHireInc.Business.Helpers;using VacationHireInc.Business.Services.ReceptionCard.Dtos;using VacationHireInc.Data.Abstraction;namespace VacationHireInc.Business.Services.ReceptionCard{    public class ReceptionCardService : IReceptionCardService    {        private readonly IRepository _repository;        public ReceptionCardService(IRepository repository)        {            _repository = repository;        }        public async Task<List<ReceptionCardDto>> GetListAsync()        {            return await _repository.Query<Data.Entities.ReceptionCard>()                .Select(e => new ReceptionCardDto                {                    Id = e.Id,                    ObjectCondition = e.ObjectCondition,                    ObjectType = e.ObjectType,                    FuelLevel = e.FuelLevel,                    ReservationId = e.ReservationId                })                .ToListAsync();        }        public async Task<ReceptionCardDto> GetDetailsAsync(string id)        {            var result = await _repository.Query<Data.Entities.ReceptionCard>()                .Where(e => e.Id == id)                .Select(e => new ReceptionCardDto                {                    Id = e.Id,                    ObjectCondition = e.ObjectCondition,                    ObjectType = e.ObjectType,                    FuelLevel = e.FuelLevel,                    ReservationId = e.ReservationId                })                .FirstOrDefaultAsync();            if (result == null)            {                throw new ObjectNotFoundException(id, typeof(Data.Entities.ReceptionCard));            }            return result;        }        public async Task CreateAsync(ReceptionCardDto dto)        {            GenericMethods.CheckRequestData(dto);            await _repository.InsertAsync(new Data.Entities.ReceptionCard            {                Id = Guid.NewGuid().ToString(),                ObjectCondition = dto.ObjectCondition,                ObjectType = dto.ObjectType,                FuelLevel = dto.FuelLevel,                ReservationId = dto.ReservationId            });            await _repository.SaveAsync();        }        public async Task UpdateAsync(string id, ReceptionCardDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = await _repository.GetEntityAsync<Data.Entities.ReceptionCard>(id);            entity.FuelLevel = dto.FuelLevel;            entity.ObjectCondition = dto.ObjectCondition;            entity.ObjectType = dto.ObjectType;            await _repository.SaveAsync();        }        public async Task DeleteAsync(string id)        {            await _repository.DeleteAsync<Data.Entities.ReceptionCard>(id);        }    }}