using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Extensions;using VacationHireInc.Business.Helpers;using VacationHireInc.Business.Services.ReceptionCard.Dtos;using VacationHireInc.Data.Abstraction;using VacationHireInc.Data.Entities.Enums;namespace VacationHireInc.Business.Services.ReceptionCard{    public class ReceptionCardService : IReceptionCardService    {        private readonly IRepository _repository;        public ReceptionCardService(IRepository repository)        {            _repository = repository;        }        public async Task<List<ReceptionCardDto>> GetListAsync()        {            return await _repository.Query<Data.Entities.ReceptionCard>()                .Select(e => new ReceptionCardDto                {                    Id = e.Id,                    ObjectCondition = e.ObjectCondition,                    ObjectType = e.ObjectType,                    FuelLevel = e.FuelLevel,                    ReservationId = e.ReservationId                })                .ToListAsync();        }        public async Task<ReceptionCardDto> GetDetailsAsync(string id)        {            var result = await _repository.Query<Data.Entities.ReceptionCard>()                .Where(e => e.Id == id)                .Select(e => new ReceptionCardDto                {                    Id = e.Id,                    ObjectCondition = e.ObjectCondition,                    ObjectType = e.ObjectType,                    FuelLevel = e.FuelLevel,                    ReservationId = e.ReservationId,                    Currency = e.Currency,                    TotalInvoice = e.TotalInvoice                })                .FirstOrDefaultAsync();            if (result == null)            {                throw new ObjectNotFoundException(id, typeof(Data.Entities.ReceptionCard));            }            return result;        }        public async Task CreateAsync(ReceptionCardDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = new Data.Entities.ReceptionCard            {                Id = Guid.NewGuid().ToString(),                ObjectCondition = dto.ObjectCondition,                ObjectType = dto.ObjectType,                FuelLevel = dto.FuelLevel,                ReservationId = dto.ReservationId,                Currency = dto.Currency,                TotalInvoice = dto.TotalInvoice            };            await _repository.ExecuteTransactionalAsync(async transaction =>            {                await _repository.InsertAsync(entity);                await UpdateObjectAvailabilityAsync(dto.ReservationId, dto.ObjectType);                await _repository.SaveAsync();            });        }        public async Task UpdateAsync(string id, ReceptionCardDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = await _repository.GetEntityAsync<Data.Entities.ReceptionCard>(id);            await _repository.ExecuteTransactionalAsync(async transaction =>            {                entity.FuelLevel = dto.FuelLevel;                entity.ObjectCondition = dto.ObjectCondition;                entity.ObjectType = dto.ObjectType;                entity.ReservationId = dto.ReservationId;                entity.Currency = dto.Currency;                entity.TotalInvoice = dto.TotalInvoice;                await UpdateObjectAvailabilityAsync(dto.ReservationId, dto.ObjectType);                await _repository.SaveAsync();            });        }        public async Task DeleteAsync(string id)        {            await _repository.DeleteEntityAsync<Data.Entities.ReceptionCard>(id);        }        private async Task UpdateObjectAvailabilityAsync(string reservationId, ObjectType type)        {            switch (type)            {                case ObjectType.Vehicle:                    await _repository.UpdateObjectAvailabilityAsync<Data.Entities.Vehicle>(reservationId);                    break;                default:                    throw new ArgumentOutOfRangeException(nameof(type), type, null);            }        }    }}