using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Extensions;using VacationHireInc.Business.Helpers;using VacationHireInc.Business.Services.Reservation.Dtos;using VacationHireInc.Data.Abstraction;namespace VacationHireInc.Business.Services.Reservation{    public class ReservationService : IReservationService    {        private readonly IRepository _repository;        public ReservationService(IRepository repository)        {            _repository = repository;        }        public async Task<List<ReservationDto>> GetListAsync()        {            return await _repository.Query<Data.Entities.Reservation>()                .Select(e => new ReservationDto                {                    Id = e.Id,                    RentalStartDate = e.RentalStartDate,                    RentalExpirationDate = e.RentalExpirationDate,                    Status = e.Status                })                .ToListAsync();        }        public async Task<ReservationDto> GetDetailsAsync(string id)        {            var result = await _repository.Query<Data.Entities.Reservation>()                .Where(e => e.Id == id)                .Select(e => new ReservationDto                {                    Id = e.Id,                    RentalStartDate = e.RentalStartDate,                    RentalExpirationDate = e.RentalExpirationDate,                    Status = e.Status                })                .FirstOrDefaultAsync();            if (result == null)            {                throw new ObjectNotFoundException(id, typeof(Data.Entities.Reservation));            }            return result;        }        public async Task CreateAsync(ReservationDto dto)        {            GenericMethods.CheckRequestData(dto);            await _repository.InsertAsync(new Data.Entities.Reservation            {                Id = Guid.NewGuid().ToString(),                RentalExpirationDate = dto.RentalExpirationDate,                RentalStartDate = dto.RentalStartDate,                Status = dto.Status,                CustomerId = dto.CustomerId            });            await _repository.SaveAsync();        }        public async Task UpdateAsync(string id, ReservationDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = await _repository.GetEntityAsync<Data.Entities.Reservation>(id);            entity.RentalExpirationDate = dto.RentalExpirationDate;            entity.RentalStartDate = dto.RentalStartDate;            entity.Status = dto.Status;            await _repository.SaveAsync();        }        public async Task DeleteAsync(string id)        {            await _repository.DeleteAsync<Data.Entities.Reservation>(id);        }    }}