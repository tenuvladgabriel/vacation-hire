using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.EntityFrameworkCore;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Extensions;using VacationHireInc.Business.Helpers;using VacationHireInc.Business.Services.GeneralDtos;using VacationHireInc.Business.Services.Reservation.Dtos;using VacationHireInc.Data.Abstraction;using VacationHireInc.Data.Entities.Enums;namespace VacationHireInc.Business.Services.Reservation{    public class ReservationService : IReservationService    {        private readonly IRepository _repository;        public ReservationService(IRepository repository)        {            _repository = repository;        }        public async Task<List<ReservationDto>> GetListAsync()        {            return await _repository.Query<Data.Entities.Reservation>()                .Select(e => new ReservationDto                {                    Id = e.Id,                    RentalStartDate = e.RentalStartDate,                    RentalExpirationDate = e.RentalExpirationDate,                    Status = e.Status                })                .ToListAsync();        }        public async Task<ReservationDto> GetDetailsAsync(string id)        {            var result = await _repository.Query<Data.Entities.Reservation>()                .Where(e => e.Id == id)                .Select(e => new ReservationDto                {                    Id = e.Id,                    RentalStartDate = e.RentalStartDate,                    RentalExpirationDate = e.RentalExpirationDate,                    Status = e.Status,                    CustomerId = e.CustomerId,                    Vehicles = e.Vehicles.Select(v => new OptionDto                    {                        Name = v.Name,                        Value = v.Id                    }).ToList()                })                .FirstOrDefaultAsync();            if (result == null)            {                throw new ObjectNotFoundException(id, typeof(Data.Entities.Reservation));            }            return result;        }        public async Task CreateAsync(ReservationDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = new Data.Entities.Reservation            {                Id = Guid.NewGuid().ToString(),                RentalExpirationDate = dto.RentalExpirationDate,                RentalStartDate = dto.RentalStartDate,                Status = ReservationStatus.Pending,                CustomerId = dto.CustomerId            };            await _repository.ExecuteTransactionalAsync(async transaction =>            {                await _repository.InsertAsync(entity);                await AttachVehiclesToReservationAsync(entity.Id, dto.Vehicles.Select(v => v.Value).ToList());                await _repository.SaveAsync();            });        }        public async Task UpdateAsync(string id, ReservationDto dto)        {            GenericMethods.CheckRequestData(dto);            var entity = await _repository.GetEntityAsync<Data.Entities.Reservation>(id);            await _repository.ExecuteTransactionalAsync(async transaction =>            {                entity.RentalExpirationDate = dto.RentalExpirationDate;                entity.RentalStartDate = dto.RentalStartDate;                entity.Status = dto.Status;                entity.CustomerId = dto.CustomerId;                await AttachVehiclesToReservationAsync(id, dto.Vehicles.Select(v => v.Value).ToList());                await _repository.SaveAsync();            });        }        public async Task DeleteAsync(string id)        {            await _repository.DeleteEntityAsync<Data.Entities.Reservation>(id);        }        public async Task<List<OptionDto>> GetConfirmedReservationListAsync()        {            return await _repository.Query<Data.Entities.Reservation>()                .Where(e => e.Status == ReservationStatus.Confirmed)                .Select(e => new OptionDto                {                    Name = $"{e.Customer.FirstName} - Reservation",                    Value = e.Id                })                .ToListAsync();        }        public async Task<decimal> CalculateTotalInvoiceAsync(string id)        {            return await _repository.Query<Data.Entities.Reservation>()                .Where(e => e.Id == id)                .SelectMany(e => e.Vehicles.Select(v => v.Price))                .SumAsync(price => price);        }        private async Task AttachVehiclesToReservationAsync(string reservationId, ICollection<string> vehicleIds)        {            if (vehicleIds != null && vehicleIds.Count > 0)            {                await _repository.Query<Data.Entities.Vehicle>()                    .Where(e => vehicleIds.Contains(e.Id))                    .UpdateFromQueryAsync(e => new Data.Entities.Vehicle                    {                        ReservationId = reservationId,                        AvailabilityStatus = AvailabilityStatus.Unavailable                    });            }        }    }}