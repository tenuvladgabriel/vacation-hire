using System.Reflection;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using VacationHireInc.Business.Abstractions;using VacationHireInc.Business.Services.Currency;using VacationHireInc.Business.Services.Customer;using VacationHireInc.Business.Services.ReceptionCard;using VacationHireInc.Business.Services.Reservation;using VacationHireInc.Business.Services.Vehicle;using VacationHireInc.Data;using VacationHireInc.Data.Abstraction;namespace VacationHireInc.Business.Extensions{    public static class RegistrationServiceExtension    {        public static void AddService(this IServiceCollection service, IConfiguration configuration)        {            service.AddScoped<IRepository, Repository>();            service.AddScoped<ICustomerService, CustomerService>();            service.AddScoped<IReceptionCardService, ReceptionCardService>();            service.AddScoped<IReservationService, ReservationService>();            service.AddScoped<IVehicleService, VehicleService>();            service.AddScoped<ICurrencyService, CurrencyService>();            service.ConnectToDatabase(configuration);            service.ConfigureHttpClient(configuration, "Currency");        }        private static void ConnectToDatabase(this IServiceCollection service, IConfiguration configuration)        {            var migrationsAssembly = typeof(Constants).GetTypeInfo().Assembly.GetName().Name;            service.AddDbContext<VacationHireContext>(options =>                options.UseNpgsql(configuration.GetValue<string>("ConnectionStrings:PGConnection"),                    builder => { builder.MigrationsAssembly(migrationsAssembly); }));        }        private static void ConfigureHttpClient(this IServiceCollection service, IConfiguration configuration, params string[] clientNames)        {            foreach (var clientName in clientNames)            {                service.AddHttpClient(clientName, client => { client.ConfigureClientWithApiKey(configuration, clientName); });            }        }    }}